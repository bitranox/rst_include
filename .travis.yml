language: python
group: travis_latest
dist: xenial
sudo: true

env:
    global:
        - github_master="https://github.com/${TRAVIS_REPO_SLUG}/archive/master.zip"
        - pip_command="pip"
        - python_command="python"
        - WINEDEBUG=fixme-all       # switch off wine fix me messages

addons:
    apt:
        packages:
            - xvfb      # install xvfb virtual framebuffer - this we need for WINE
            - winbind   # needed for WINE

services:   # start services
  - xvfb    # is needed for WINE on headless installation


matrix:
    include:

    - os: windows
      language: sh
      name: "Windows Python 3.7"

      # oddly a secure password under env: global: causes that choco fails
      # so we need to put the option : filter_secrets: false
      # this can be a security issue, check that You dont leak secrets here !
      filter_secrets: false
      before_install:
          - ./lib_bash/lib_retry.sh retry choco install python3
          - export PATH="/c/Python37:/c/Python37/Scripts:$PATH"

    - os: linux
      language: python
      python: '3.5'

    - os: linux
      language: python
      python: '3.6'
      # we can do that also with env - but we dont want to show it on the travis build overview
      before_install:
          - export mypy_static_typecheck="True"
          - export build_docs="True"
          - export deploy_on_pypi="True"

    - os: linux
      language: python
      python: '3.7.1'

    - os: linux
      language: python
      python: '3.7-dev'

    - os: linux
      language: python
      python: 'pypy3.5-6.0'

    - os: linux
      language: python
      name: "WINE stable 32 Bit Python 3.7.3, Windows XP"
      env:
          - WINEARCH="win32"
          - WINEPREFIX="${HOME}/wine/wine32"
          - CMDPREFIX="wine"
          - wine_windows_version="winxp"
          - wine_release="stable"
          - wine_python_version="python3"

    - os: linux
      language: python
      name: "WINE stable 64 Bit Python 3.7.3, Windows XP"
      env:
          - WINEPREFIX="${HOME}/wine/wine64"
          - CMDPREFIX="wine"
          - wine_windows_version="winxp"
          - wine_release="stable"
          - wine_python_version="python3"

    - os: linux
      language: python
      name: "WINE stable 32 Bit Python 3.7.3, Windows 10"
      env:
          - WINEARCH="win32"
          - WINEPREFIX="${HOME}/wine/wine32"
          - CMDPREFIX="wine"
          - wine_windows_version="win10"
          - wine_release="stable"
          - wine_python_version="python3"

    - os: linux
      language: python
      name: "WINE stable 64 Bit Python 3.7.3, Windows 10"
      env:
          - WINEPREFIX="${HOME}/wine/wine64"
          - CMDPREFIX="wine"
          - wine_windows_version="win10"
          - wine_release="stable"
          - wine_python_version="python3"

    - os: linux
      language: python
      name: "WINE devel 32 Bit Python 3.7.3, Windows XP"
      env:
          - WINEARCH="win32"
          - WINEPREFIX="${HOME}/wine/wine32"
          - CMDPREFIX="wine"
          - wine_windows_version="winxp"
          - wine_release="devel"
          - wine_python_version="python3"

    - os: linux
      language: python
      name: "WINE devel 64 Bit Python 3.7.3, Windows XP"
      env:
          - WINEPREFIX="${HOME}/wine/wine64"
          - CMDPREFIX="wine"
          - wine_windows_version="winxp"
          - wine_release="devel"
          - wine_python_version="python3"

    - os: linux
      language: python
      name: "WINE devel 32 Bit Python 3.7.3, Windows 10"
      env:
          - WINEARCH="win32"
          - WINEPREFIX="${HOME}/wine/wine32"
          - CMDPREFIX="wine"
          - wine_windows_version="win10"
          - wine_release="devel"
          - wine_python_version="python3"

    - os: linux
      language: python
      name: "WINE devel 64 Bit Python 3.7.3, Windows 10"
      env:
          - WINEPREFIX="${HOME}/wine/wine64"
          - CMDPREFIX="wine"
          - wine_windows_version="win10"
          - wine_release="devel"
          - wine_python_version="python3"

    - os: linux
      language: python
      name: "WINE staging 32 Bit Python 3.7.3, Windows XP"
      env:
          - WINEARCH="win32"
          - WINEPREFIX="${HOME}/wine/wine32"
          - CMDPREFIX="wine"
          - wine_windows_version="winxp"
          - wine_release="staging"
          - wine_python_version="python3"

    - os: linux
      language: python
      name: "WINE staging 64 Bit Python 3.7.3, Windows XP"
      env:
          - WINEPREFIX="${HOME}/wine/wine64"
          - CMDPREFIX="wine"
          - wine_windows_version="winxp"
          - wine_release="staging"
          - wine_python_version="python3"

    - os: linux
      language: python
      name: "WINE staging 32 Bit Python 3.7.3, Windows 10"
      env:
          - WINEARCH="win32"
          - WINEPREFIX="${HOME}/wine/wine32"
          - CMDPREFIX="wine"
          - wine_windows_version="win10"
          - wine_release="staging"
          - wine_python_version="python3"

    - os: linux
      language: python
      name: "WINE staging 64 Bit Python 3.7.3, Windows 10"
      env:
          - WINEPREFIX="${HOME}/wine/wine64"
          - CMDPREFIX="wine"
          - wine_windows_version="win10"
          - wine_release="staging"
          - wine_python_version="python3"

    - os: osx
      language: sh
      name: "osX Python 3.7"
      python: "3.7"
      osx_image: xcode10.2  # Python 3.7.2 running on macOS 10.14.3
      env:
        # on osx pip and python points to python 2.7 - therefore we have to use pip3 and python3 here
        - pip_command="pip3"
        - python_command="python3"


install:
    - chmod -R +x ./*.sh             # make shellscripts executable
    - chmod -R +x ./lib_bash/*.sh    # make shellscript lib executable
    - export REPOSITORY_NAME=${TRAVIS_REPO_SLUG#*/} && ./lib_bash/lib_color.sh clr_bold clr_green "Export Repository Name ${REPOSITORY_NAME}"
    - if [[ ${TRAVIS_OS_NAME} == "linux" ]]; then service xvfb status ; fi
    - if [[ ${CMDPREFIX} == "wine" ]]; then ./install_wine.sh ; fi
    - if [[ ${CMDPREFIX} == "wine" ]]; then ./install_wine_machine.sh ; fi
    - if [[ ${wine_python_version} == "python2" ]]; then ./install_wine_python2_preinstalled.sh ; fi
    - if [[ ${wine_python_version} == "python3" ]]; then ./install_wine_python3_preinstalled.sh ; fi
    - if [[ ${CMDPREFIX} == "wine" ]]; then ./install_wine_git_portable.sh ; fi

    - ${CMDPREFIX} ${python_command} -m pip install --upgrade pip
    - if [[ $TRAVIS_PYTHON_VERSION == pypy3.5-6.0 ]]; then ${CMDPREFIX} ${pip_command} install "pytest-cov==2.6.0"; fi
    # mypy does not run on pypy 3.5 - we only do mypy on python 3.6
    - if [[ "${mypy_static_typecheck}" == "True" ]]; then ${CMDPREFIX} ${pip_command} install mypy; fi
    # this is the default line for other projects but rst_include itself:
    # - if [[ "${build_docs}" == "True" ]]; then ${CMDPREFIX} ${pip_command} install rst_include; fi
    - ${CMDPREFIX} ${pip_command} install codecov pytest pytest-pep8 pytest-cov dill
    - if [[ -f setup.py ]]; then export setup_py_found="True" && ./lib_bash/lib_color.sh clr_bold clr_green "setup.py found" ; else ./lib_bash/lib_color.sh clr_bold clr_red  "*** no setup.py found, nothing to test" ; fi
    - if [[ "${setup_py_found}" == "True" ]]; then ${CMDPREFIX} ${pip_command} install -e . ; fi

script:
    # on rst_include itself we test on every os
    - export build_docs="True"

    - if [[ "${setup_py_found}" == "True" ]]; then ${CMDPREFIX} ${pip_command} install ${github_master} --install-option test ; else ./lib_bash/lib_color.sh clr_bold clr_red  "no setup.py found, nothing to test" ; fi
    - if [[ "${setup_py_found}" == "True" ]]; then ${CMDPREFIX} ${python_command} -m pytest --pep8 --cov ; else ./lib_bash/lib_color.sh clr_bold clr_red  "no setup.py found, nothing to test" ; fi
    - if [[ "${mypy_static_typecheck}" == "True" ]]; then ${CMDPREFIX} ${python_command} -m mypy -p ${REPOSITORY_NAME} && ./lib_bash/lib_color.sh clr_bold clr_green "static typechecking done" ; else ./lib_bash/lib_color.sh clr_bold clr_red "static typechecking disabled on this build" ;  fi
    - if [[ -f build_docs.py ]] && [[ "${build_docs}" == "True" ]]; then ${CMDPREFIX} ${python_command} build_docs.py ${TRAVIS_REPO_SLUG} && ./lib_bash/lib_color.sh clr_bold clr_green "build_docs done" ; else ./lib_bash/lib_color.sh clr_bold clr_red "build_docs disabled on this build" ;  fi


after_success:
    - ${CMDPREFIX} coverage report
    - ${CMDPREFIX} codecov

    # This works for sure - but might expose the secure password within the matrix,
    # because windows builds need filter_secrets: false at the Moment (2019-04-12)
    # - if [[ ${deploy_on_pypi} == "True" ]] && [[ -n ${TRAVIS_TAG} ]]; then ${CMDPREFIX} ${pip_command} install -U twine ; fi
    # - if [[ ${deploy_on_pypi} == "True" ]] && [[ -n ${TRAVIS_TAG} ]]; then ${CMDPREFIX} ${pip_command} install wheel ; fi
    # - if [[ ${deploy_on_pypi} == "True" ]] && [[ -n ${TRAVIS_TAG} ]]; then ${CMDPREFIX} ${python_command} setup.py sdist bdist_wheel ; fi
    # - if [[ ${deploy_on_pypi} == "True" ]] && [[ -n ${TRAVIS_TAG} ]]; then ${CMDPREFIX} twine upload --repository-url https://upload.pypi.org/legacy/ -u bitranox -p ${pypi_password} dist/* ; fi


# the password needs to be encrypted pointing to ${deploy.password}
# make a backup before adding secrets by travis gem, all comments in the yml files get lost !
# password needs to be created from the project directory for every repository with ruby gem travis:   travis encrypt "*******" --add deploy.password --org
# option --org for travis.org, --com for travis.com

deploy:
  provider: pypi
  user: bitranox
  # password set for rst_include
  password:
    secure: ru4v/F2y7BHISlQjKpQ+cNZN0qYij3VcUEQzzEoAP+/WUQvN9kSBMqhZ2UsPJCQW6nrkSOyMxB5q0KHIKabmNDPBpiEplIRP/XjkhhuIgO8N8Iqf9/YSgg1eBtnRpV42MgLx3WWPxBsUTLRtAQ2cgAnd47Gn84lx3FWFNASuO3J6YbBSIzEzLQ8coQSl7cN6OyuJ1spUWurnw2tA8mdJGEVuf2nF8sDv2dKj6ijf5jHjKEA4bolnVnYOy5BYUGDiwJAXFCfwLwXrwra/2QZENuC5dYrrzKXYMUERB/U+F5P43eL0iuiOx72JLr930sBxkd6LAuR20A0oSISwHkaddokF6yWxd/QikB3aSPvBKChlKp7Uki09YFypL7Gif/r9QF40SLNOl1Wadiz2p2hPxh6W/ozSa8Q/pR77iWlQH+MgO+gG5AzAdMPicV98EfA9yT1NiFIxnTk/pZo8s5Nn0Ydi/UlZKW6M0T1yBS3PWgaYuQiWDjx/QtCLJ+wddEAYNss9JJ6ygKSFsp9HX/ljl8r2t/3SqnOsKDvm3/MHIt+ZGXxWuW5CrdRk6HhVR+D1IlaEhWrPV0TufenIrZLVT7JaLuNHvxFnpDntHZ2r2SXITOtf7HwZWzdZ38b9u/Ku5MTS0n2v/M+iFEKdfmA+mwehzjeKmJx1OkR9AfYPnrM=
  distributions: "sdist bdist_wheel"
  on:
    tags: true    # we release only on PyPi on tagged Releases (Release on Github)
    # python: 3.6  # that would be the usual option, but we can not use it.
    # we need this, because on projects with windows builds only, we can not build on windows, because of
    # the filter_secure issue. So we build on WINE, but need somehow to address the matrix include on which to build
    condition: ${deploy_on_pypi} = "True"


notifications:
  email:
    recipients:
        - rnowotny@rotek.at
    on_success: never # default: change
    on_failure: always # default: always
